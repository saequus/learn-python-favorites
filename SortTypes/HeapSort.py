# –ü–∏—Ä–∞–º–∏–¥–∞–ª—å- –Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (heap sort). –í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å: Œò(ùëõ log ùëõ).
# –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ –ø–∞–º—è—Ç–∏: ùëÇ(1). –°–≤–æ–π—Å—Ç–≤–∞: –Ω–µ—É—Å—Ç–æ–π—á–∏–≤–∞—è.
# –ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —É—Å—Ç–æ–∏ÃÜ—á–∏–≤—ã–º (stable), –µ—Å–ª–∏ –æ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç
# –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–∏ÃÜ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–ª—é—á–µ–∏ÃÜ.

# To heapify subtree rooted at index i.
# n is size of heap
def heapify(arr, n, i):
    largest = i
    l = 2 * i + 1  # left = 2*i + 1
    r = 2 * i + 2  # right = 2*i + 2
    if l < n and arr[i] < arr[l]:  # See if left child of root exists and is greater than root
        largest = l
    if r < n and arr[largest] < arr[r]:  # See if right child of root exists and is greater than largest
        largest = r
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]  # swap

        # Heapify the root.
        heapify(arr, n, largest)

    # The main function to sort an array of given size


def heapSort(arr):
    n = len(arr)
    # Build a maxheap.
    for i in range(n, -1, -1):
        heapify(arr, n, i)
        # One by one extract elements
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  # swap
        heapify(arr, i, 0)
